// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_list.proto

package com.netease.xmpp.master.common;

public final class ServerListProtos {
  private ServerListProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ServerOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // repeated .test.Server.ServerInfo server = 1;
    java.util.List<com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo> 
        getServerList();
    com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo getServer(int index);
    int getServerCount();
    java.util.List<? extends com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfoOrBuilder> 
        getServerOrBuilderList();
    com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfoOrBuilder getServerOrBuilder(
        int index);
  }
  public static final class Server extends
      com.google.protobuf.GeneratedMessage
      implements ServerOrBuilder {
    // Use Server.newBuilder() to construct.
    private Server(Builder builder) {
      super(builder);
    }
    private Server(boolean noInit) {}
    
    private static final Server defaultInstance;
    public static Server getDefaultInstance() {
      return defaultInstance;
    }
    
    public Server getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.netease.xmpp.master.common.ServerListProtos.internal_static_test_Server_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.netease.xmpp.master.common.ServerListProtos.internal_static_test_Server_fieldAccessorTable;
    }
    
    public interface ServerInfoOrBuilder
        extends com.google.protobuf.MessageOrBuilder {
      
      // required string ip = 1;
      boolean hasIp();
      String getIp();
      
      // required int32 clientPort = 2;
      boolean hasClientPort();
      int getClientPort();
      
      // required int32 clientSSLPort = 3;
      boolean hasClientSSLPort();
      int getClientSSLPort();
      
      // required int32 CMPort = 4;
      boolean hasCMPort();
      int getCMPort();
      
      // required string cacheHost = 5;
      boolean hasCacheHost();
      String getCacheHost();
      
      // required int32 cachePort = 6;
      boolean hasCachePort();
      int getCachePort();
      
      // required int64 hash = 7;
      boolean hasHash();
      long getHash();
    }
    public static final class ServerInfo extends
        com.google.protobuf.GeneratedMessage
        implements ServerInfoOrBuilder {
      // Use ServerInfo.newBuilder() to construct.
      private ServerInfo(Builder builder) {
        super(builder);
      }
      private ServerInfo(boolean noInit) {}
      
      private static final ServerInfo defaultInstance;
      public static ServerInfo getDefaultInstance() {
        return defaultInstance;
      }
      
      public ServerInfo getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.netease.xmpp.master.common.ServerListProtos.internal_static_test_Server_ServerInfo_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.netease.xmpp.master.common.ServerListProtos.internal_static_test_Server_ServerInfo_fieldAccessorTable;
      }
      
      private int bitField0_;
      // required string ip = 1;
      public static final int IP_FIELD_NUMBER = 1;
      private java.lang.Object ip_;
      public boolean hasIp() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getIp() {
        java.lang.Object ref = ip_;
        if (ref instanceof String) {
          return (String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          if (com.google.protobuf.Internal.isValidUtf8(bs)) {
            ip_ = s;
          }
          return s;
        }
      }
      private com.google.protobuf.ByteString getIpBytes() {
        java.lang.Object ref = ip_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8((String) ref);
          ip_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      
      // required int32 clientPort = 2;
      public static final int CLIENTPORT_FIELD_NUMBER = 2;
      private int clientPort_;
      public boolean hasClientPort() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getClientPort() {
        return clientPort_;
      }
      
      // required int32 clientSSLPort = 3;
      public static final int CLIENTSSLPORT_FIELD_NUMBER = 3;
      private int clientSSLPort_;
      public boolean hasClientSSLPort() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getClientSSLPort() {
        return clientSSLPort_;
      }
      
      // required int32 CMPort = 4;
      public static final int CMPORT_FIELD_NUMBER = 4;
      private int cMPort_;
      public boolean hasCMPort() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getCMPort() {
        return cMPort_;
      }
      
      // required string cacheHost = 5;
      public static final int CACHEHOST_FIELD_NUMBER = 5;
      private java.lang.Object cacheHost_;
      public boolean hasCacheHost() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public String getCacheHost() {
        java.lang.Object ref = cacheHost_;
        if (ref instanceof String) {
          return (String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          if (com.google.protobuf.Internal.isValidUtf8(bs)) {
            cacheHost_ = s;
          }
          return s;
        }
      }
      private com.google.protobuf.ByteString getCacheHostBytes() {
        java.lang.Object ref = cacheHost_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8((String) ref);
          cacheHost_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      
      // required int32 cachePort = 6;
      public static final int CACHEPORT_FIELD_NUMBER = 6;
      private int cachePort_;
      public boolean hasCachePort() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public int getCachePort() {
        return cachePort_;
      }
      
      // required int64 hash = 7;
      public static final int HASH_FIELD_NUMBER = 7;
      private long hash_;
      public boolean hasHash() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public long getHash() {
        return hash_;
      }
      
      private void initFields() {
        ip_ = "";
        clientPort_ = 0;
        clientSSLPort_ = 0;
        cMPort_ = 0;
        cacheHost_ = "";
        cachePort_ = 0;
        hash_ = 0L;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;
        
        if (!hasIp()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasClientPort()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasClientSSLPort()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasCMPort()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasCacheHost()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasCachePort()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasHash()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getIpBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, clientPort_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, clientSSLPort_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeInt32(4, cMPort_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeBytes(5, getCacheHostBytes());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeInt32(6, cachePort_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeInt64(7, hash_);
        }
        getUnknownFields().writeTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getIpBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, clientPort_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, clientSSLPort_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, cMPort_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(5, getCacheHostBytes());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(6, cachePort_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(7, hash_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }
      
      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }
      
      public static com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.netease.xmpp.master.common.ServerListProtos.internal_static_test_Server_ServerInfo_descriptor;
        }
        
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.netease.xmpp.master.common.ServerListProtos.internal_static_test_Server_ServerInfo_fieldAccessorTable;
        }
        
        // Construct using com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }
        
        private Builder(BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }
        
        public Builder clear() {
          super.clear();
          ip_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          clientPort_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          clientSSLPort_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          cMPort_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          cacheHost_ = "";
          bitField0_ = (bitField0_ & ~0x00000010);
          cachePort_ = 0;
          bitField0_ = (bitField0_ & ~0x00000020);
          hash_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000040);
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.getDescriptor();
        }
        
        public com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo getDefaultInstanceForType() {
          return com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.getDefaultInstance();
        }
        
        public com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo build() {
          com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }
        
        private com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return result;
        }
        
        public com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo buildPartial() {
          com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo result = new com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.ip_ = ip_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.clientPort_ = clientPort_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.clientSSLPort_ = clientSSLPort_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.cMPort_ = cMPort_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.cacheHost_ = cacheHost_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          result.cachePort_ = cachePort_;
          if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
            to_bitField0_ |= 0x00000040;
          }
          result.hash_ = hash_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }
        
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo) {
            return mergeFrom((com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }
        
        public Builder mergeFrom(com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo other) {
          if (other == com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.getDefaultInstance()) return this;
          if (other.hasIp()) {
            setIp(other.getIp());
          }
          if (other.hasClientPort()) {
            setClientPort(other.getClientPort());
          }
          if (other.hasClientSSLPort()) {
            setClientSSLPort(other.getClientSSLPort());
          }
          if (other.hasCMPort()) {
            setCMPort(other.getCMPort());
          }
          if (other.hasCacheHost()) {
            setCacheHost(other.getCacheHost());
          }
          if (other.hasCachePort()) {
            setCachePort(other.getCachePort());
          }
          if (other.hasHash()) {
            setHash(other.getHash());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }
        
        public final boolean isInitialized() {
          if (!hasIp()) {
            
            return false;
          }
          if (!hasClientPort()) {
            
            return false;
          }
          if (!hasClientSSLPort()) {
            
            return false;
          }
          if (!hasCMPort()) {
            
            return false;
          }
          if (!hasCacheHost()) {
            
            return false;
          }
          if (!hasCachePort()) {
            
            return false;
          }
          if (!hasHash()) {
            
            return false;
          }
          return true;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder(
              this.getUnknownFields());
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  this.setUnknownFields(unknownFields.build());
                  onChanged();
                  return this;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                ip_ = input.readBytes();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                clientPort_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                clientSSLPort_ = input.readInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                cMPort_ = input.readInt32();
                break;
              }
              case 42: {
                bitField0_ |= 0x00000010;
                cacheHost_ = input.readBytes();
                break;
              }
              case 48: {
                bitField0_ |= 0x00000020;
                cachePort_ = input.readInt32();
                break;
              }
              case 56: {
                bitField0_ |= 0x00000040;
                hash_ = input.readInt64();
                break;
              }
            }
          }
        }
        
        private int bitField0_;
        
        // required string ip = 1;
        private java.lang.Object ip_ = "";
        public boolean hasIp() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        public String getIp() {
          java.lang.Object ref = ip_;
          if (!(ref instanceof String)) {
            String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
            ip_ = s;
            return s;
          } else {
            return (String) ref;
          }
        }
        public Builder setIp(String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          ip_ = value;
          onChanged();
          return this;
        }
        public Builder clearIp() {
          bitField0_ = (bitField0_ & ~0x00000001);
          ip_ = getDefaultInstance().getIp();
          onChanged();
          return this;
        }
        void setIp(com.google.protobuf.ByteString value) {
          bitField0_ |= 0x00000001;
          ip_ = value;
          onChanged();
        }
        
        // required int32 clientPort = 2;
        private int clientPort_ ;
        public boolean hasClientPort() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        public int getClientPort() {
          return clientPort_;
        }
        public Builder setClientPort(int value) {
          bitField0_ |= 0x00000002;
          clientPort_ = value;
          onChanged();
          return this;
        }
        public Builder clearClientPort() {
          bitField0_ = (bitField0_ & ~0x00000002);
          clientPort_ = 0;
          onChanged();
          return this;
        }
        
        // required int32 clientSSLPort = 3;
        private int clientSSLPort_ ;
        public boolean hasClientSSLPort() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        public int getClientSSLPort() {
          return clientSSLPort_;
        }
        public Builder setClientSSLPort(int value) {
          bitField0_ |= 0x00000004;
          clientSSLPort_ = value;
          onChanged();
          return this;
        }
        public Builder clearClientSSLPort() {
          bitField0_ = (bitField0_ & ~0x00000004);
          clientSSLPort_ = 0;
          onChanged();
          return this;
        }
        
        // required int32 CMPort = 4;
        private int cMPort_ ;
        public boolean hasCMPort() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        public int getCMPort() {
          return cMPort_;
        }
        public Builder setCMPort(int value) {
          bitField0_ |= 0x00000008;
          cMPort_ = value;
          onChanged();
          return this;
        }
        public Builder clearCMPort() {
          bitField0_ = (bitField0_ & ~0x00000008);
          cMPort_ = 0;
          onChanged();
          return this;
        }
        
        // required string cacheHost = 5;
        private java.lang.Object cacheHost_ = "";
        public boolean hasCacheHost() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        public String getCacheHost() {
          java.lang.Object ref = cacheHost_;
          if (!(ref instanceof String)) {
            String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
            cacheHost_ = s;
            return s;
          } else {
            return (String) ref;
          }
        }
        public Builder setCacheHost(String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          cacheHost_ = value;
          onChanged();
          return this;
        }
        public Builder clearCacheHost() {
          bitField0_ = (bitField0_ & ~0x00000010);
          cacheHost_ = getDefaultInstance().getCacheHost();
          onChanged();
          return this;
        }
        void setCacheHost(com.google.protobuf.ByteString value) {
          bitField0_ |= 0x00000010;
          cacheHost_ = value;
          onChanged();
        }
        
        // required int32 cachePort = 6;
        private int cachePort_ ;
        public boolean hasCachePort() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        public int getCachePort() {
          return cachePort_;
        }
        public Builder setCachePort(int value) {
          bitField0_ |= 0x00000020;
          cachePort_ = value;
          onChanged();
          return this;
        }
        public Builder clearCachePort() {
          bitField0_ = (bitField0_ & ~0x00000020);
          cachePort_ = 0;
          onChanged();
          return this;
        }
        
        // required int64 hash = 7;
        private long hash_ ;
        public boolean hasHash() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        public long getHash() {
          return hash_;
        }
        public Builder setHash(long value) {
          bitField0_ |= 0x00000040;
          hash_ = value;
          onChanged();
          return this;
        }
        public Builder clearHash() {
          bitField0_ = (bitField0_ & ~0x00000040);
          hash_ = 0L;
          onChanged();
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:test.Server.ServerInfo)
      }
      
      static {
        defaultInstance = new ServerInfo(true);
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:test.Server.ServerInfo)
    }
    
    // repeated .test.Server.ServerInfo server = 1;
    public static final int SERVER_FIELD_NUMBER = 1;
    private java.util.List<com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo> server_;
    public java.util.List<com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo> getServerList() {
      return server_;
    }
    public java.util.List<? extends com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfoOrBuilder> 
        getServerOrBuilderList() {
      return server_;
    }
    public int getServerCount() {
      return server_.size();
    }
    public com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo getServer(int index) {
      return server_.get(index);
    }
    public com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfoOrBuilder getServerOrBuilder(
        int index) {
      return server_.get(index);
    }
    
    private void initFields() {
      server_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      for (int i = 0; i < getServerCount(); i++) {
        if (!getServer(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < server_.size(); i++) {
        output.writeMessage(1, server_.get(i));
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (int i = 0; i < server_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, server_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static com.netease.xmpp.master.common.ServerListProtos.Server parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.netease.xmpp.master.common.ServerListProtos.Server parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.netease.xmpp.master.common.ServerListProtos.Server parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.netease.xmpp.master.common.ServerListProtos.Server parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.netease.xmpp.master.common.ServerListProtos.Server parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.netease.xmpp.master.common.ServerListProtos.Server parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.netease.xmpp.master.common.ServerListProtos.Server parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.netease.xmpp.master.common.ServerListProtos.Server parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.netease.xmpp.master.common.ServerListProtos.Server parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.netease.xmpp.master.common.ServerListProtos.Server parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.netease.xmpp.master.common.ServerListProtos.Server prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.netease.xmpp.master.common.ServerListProtos.ServerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.netease.xmpp.master.common.ServerListProtos.internal_static_test_Server_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.netease.xmpp.master.common.ServerListProtos.internal_static_test_Server_fieldAccessorTable;
      }
      
      // Construct using com.netease.xmpp.master.common.ServerListProtos.Server.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getServerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        if (serverBuilder_ == null) {
          server_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          serverBuilder_.clear();
        }
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.netease.xmpp.master.common.ServerListProtos.Server.getDescriptor();
      }
      
      public com.netease.xmpp.master.common.ServerListProtos.Server getDefaultInstanceForType() {
        return com.netease.xmpp.master.common.ServerListProtos.Server.getDefaultInstance();
      }
      
      public com.netease.xmpp.master.common.ServerListProtos.Server build() {
        com.netease.xmpp.master.common.ServerListProtos.Server result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private com.netease.xmpp.master.common.ServerListProtos.Server buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        com.netease.xmpp.master.common.ServerListProtos.Server result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public com.netease.xmpp.master.common.ServerListProtos.Server buildPartial() {
        com.netease.xmpp.master.common.ServerListProtos.Server result = new com.netease.xmpp.master.common.ServerListProtos.Server(this);
        int from_bitField0_ = bitField0_;
        if (serverBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            server_ = java.util.Collections.unmodifiableList(server_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.server_ = server_;
        } else {
          result.server_ = serverBuilder_.build();
        }
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.netease.xmpp.master.common.ServerListProtos.Server) {
          return mergeFrom((com.netease.xmpp.master.common.ServerListProtos.Server)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.netease.xmpp.master.common.ServerListProtos.Server other) {
        if (other == com.netease.xmpp.master.common.ServerListProtos.Server.getDefaultInstance()) return this;
        if (serverBuilder_ == null) {
          if (!other.server_.isEmpty()) {
            if (server_.isEmpty()) {
              server_ = other.server_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureServerIsMutable();
              server_.addAll(other.server_);
            }
            onChanged();
          }
        } else {
          if (!other.server_.isEmpty()) {
            if (serverBuilder_.isEmpty()) {
              serverBuilder_.dispose();
              serverBuilder_ = null;
              server_ = other.server_;
              bitField0_ = (bitField0_ & ~0x00000001);
              serverBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getServerFieldBuilder() : null;
            } else {
              serverBuilder_.addAllMessages(other.server_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        for (int i = 0; i < getServerCount(); i++) {
          if (!getServer(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder subBuilder = com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addServer(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // repeated .test.Server.ServerInfo server = 1;
      private java.util.List<com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo> server_ =
        java.util.Collections.emptyList();
      private void ensureServerIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          server_ = new java.util.ArrayList<com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo>(server_);
          bitField0_ |= 0x00000001;
         }
      }
      
      private com.google.protobuf.RepeatedFieldBuilder<
          com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo, com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder, com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfoOrBuilder> serverBuilder_;
      
      public java.util.List<com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo> getServerList() {
        if (serverBuilder_ == null) {
          return java.util.Collections.unmodifiableList(server_);
        } else {
          return serverBuilder_.getMessageList();
        }
      }
      public int getServerCount() {
        if (serverBuilder_ == null) {
          return server_.size();
        } else {
          return serverBuilder_.getCount();
        }
      }
      public com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo getServer(int index) {
        if (serverBuilder_ == null) {
          return server_.get(index);
        } else {
          return serverBuilder_.getMessage(index);
        }
      }
      public Builder setServer(
          int index, com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo value) {
        if (serverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServerIsMutable();
          server_.set(index, value);
          onChanged();
        } else {
          serverBuilder_.setMessage(index, value);
        }
        return this;
      }
      public Builder setServer(
          int index, com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder builderForValue) {
        if (serverBuilder_ == null) {
          ensureServerIsMutable();
          server_.set(index, builderForValue.build());
          onChanged();
        } else {
          serverBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addServer(com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo value) {
        if (serverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServerIsMutable();
          server_.add(value);
          onChanged();
        } else {
          serverBuilder_.addMessage(value);
        }
        return this;
      }
      public Builder addServer(
          int index, com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo value) {
        if (serverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureServerIsMutable();
          server_.add(index, value);
          onChanged();
        } else {
          serverBuilder_.addMessage(index, value);
        }
        return this;
      }
      public Builder addServer(
          com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder builderForValue) {
        if (serverBuilder_ == null) {
          ensureServerIsMutable();
          server_.add(builderForValue.build());
          onChanged();
        } else {
          serverBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      public Builder addServer(
          int index, com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder builderForValue) {
        if (serverBuilder_ == null) {
          ensureServerIsMutable();
          server_.add(index, builderForValue.build());
          onChanged();
        } else {
          serverBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      public Builder addAllServer(
          java.lang.Iterable<? extends com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo> values) {
        if (serverBuilder_ == null) {
          ensureServerIsMutable();
          super.addAll(values, server_);
          onChanged();
        } else {
          serverBuilder_.addAllMessages(values);
        }
        return this;
      }
      public Builder clearServer() {
        if (serverBuilder_ == null) {
          server_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          serverBuilder_.clear();
        }
        return this;
      }
      public Builder removeServer(int index) {
        if (serverBuilder_ == null) {
          ensureServerIsMutable();
          server_.remove(index);
          onChanged();
        } else {
          serverBuilder_.remove(index);
        }
        return this;
      }
      public com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder getServerBuilder(
          int index) {
        return getServerFieldBuilder().getBuilder(index);
      }
      public com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfoOrBuilder getServerOrBuilder(
          int index) {
        if (serverBuilder_ == null) {
          return server_.get(index);  } else {
          return serverBuilder_.getMessageOrBuilder(index);
        }
      }
      public java.util.List<? extends com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfoOrBuilder> 
           getServerOrBuilderList() {
        if (serverBuilder_ != null) {
          return serverBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(server_);
        }
      }
      public com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder addServerBuilder() {
        return getServerFieldBuilder().addBuilder(
            com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.getDefaultInstance());
      }
      public com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder addServerBuilder(
          int index) {
        return getServerFieldBuilder().addBuilder(
            index, com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.getDefaultInstance());
      }
      public java.util.List<com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder> 
           getServerBuilderList() {
        return getServerFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo, com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder, com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfoOrBuilder> 
          getServerFieldBuilder() {
        if (serverBuilder_ == null) {
          serverBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo, com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder, com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfoOrBuilder>(
                  server_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          server_ = null;
        }
        return serverBuilder_;
      }
      
      // @@protoc_insertion_point(builder_scope:test.Server)
    }
    
    static {
      defaultInstance = new Server(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:test.Server)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_test_Server_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_test_Server_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_test_Server_ServerInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_test_Server_ServerInfo_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021server_list.proto\022\004test\"\273\001\n\006Server\022\'\n\006" +
      "server\030\001 \003(\0132\027.test.Server.ServerInfo\032\207\001" +
      "\n\nServerInfo\022\n\n\002ip\030\001 \002(\t\022\022\n\nclientPort\030\002" +
      " \002(\005\022\025\n\rclientSSLPort\030\003 \002(\005\022\016\n\006CMPort\030\004 " +
      "\002(\005\022\021\n\tcacheHost\030\005 \002(\t\022\021\n\tcachePort\030\006 \002(" +
      "\005\022\014\n\004hash\030\007 \002(\003B2\n\036com.netease.xmpp.mast" +
      "er.commonB\020ServerListProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_test_Server_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_test_Server_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_test_Server_descriptor,
              new java.lang.String[] { "Server", },
              com.netease.xmpp.master.common.ServerListProtos.Server.class,
              com.netease.xmpp.master.common.ServerListProtos.Server.Builder.class);
          internal_static_test_Server_ServerInfo_descriptor =
            internal_static_test_Server_descriptor.getNestedTypes().get(0);
          internal_static_test_Server_ServerInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_test_Server_ServerInfo_descriptor,
              new java.lang.String[] { "Ip", "ClientPort", "ClientSSLPort", "CMPort", "CacheHost", "CachePort", "Hash", },
              com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.class,
              com.netease.xmpp.master.common.ServerListProtos.Server.ServerInfo.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
